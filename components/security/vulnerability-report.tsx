"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { AlertTriangle, Shield, FileText, Send, CheckCircle, Clock, X } from "lucide-react"

interface Vulnerability {
  id: string
  title: string
  severity: "critical" | "high" | "medium" | "low"
  category: string
  description: string
  location: string
  cwe: string
  cvss: number
  status: "open" | "fixed" | "false-positive" | "accepted-risk"
  remediation: string
}

interface VulnerabilityReportProps {
  ticketId: string
  projectName: string
  version: string
  onReportSubmit?: (report: any) => void
}

const mockVulnerabilities: Vulnerability[] = [
  {
    id: "vuln-001",
    title: "SQL Injection in User Authentication",
    severity: "critical",
    category: "Injection",
    description: "The application is vulnerable to SQL injection attacks in the user authentication module.",
    location: "/src/auth/login.php:45",
    cwe: "CWE-89",
    cvss: 9.8,
    status: "open",
    remediation: "Use parameterized queries or prepared statements to prevent SQL injection attacks.",
  },
  {
    id: "vuln-002",
    title: "Cross-Site Scripting (XSS) in Comment Section",
    severity: "high",
    category: "XSS",
    description: "User input is not properly sanitized in the comment section, allowing for stored XSS attacks.",
    location: "/src/comments/display.js:23",
    cwe: "CWE-79",
    cvss: 7.4,
    status: "open",
    remediation: "Implement proper input validation and output encoding to prevent XSS attacks.",
  },
  {
    id: "vuln-003",
    title: "Insecure Direct Object Reference",
    severity: "medium",
    category: "Access Control",
    description: "The application allows users to access resources by manipulating URL parameters.",
    location: "/src/api/user-profile.php:12",
    cwe: "CWE-639",
    cvss: 5.3,
    status: "open",
    remediation: "Implement proper access controls and validate user permissions before allowing resource access.",
  },
]

export function VulnerabilityReport({ ticketId, projectName, version, onReportSubmit }: VulnerabilityReportProps) {
  const [vulnerabilities] = useState<Vulnerability[]>(mockVulnerabilities)
  const [reportNotes, setReportNotes] = useState("")
  const [overallRisk, setOverallRisk] = useState<string>("")
  const [recommendation, setRecommendation] = useState<string>("")
  const [isSubmitting, setIsSubmitting] = useState(false)

  const getSeverityColor = (severity: Vulnerability["severity"]) => {
    switch (severity) {
      case "critical":
        return "bg-red-100 text-red-800"
      case "high":
        return "bg-orange-100 text-orange-800"
      case "medium":
        return "bg-yellow-100 text-yellow-800"
      case "low":
        return "bg-green-100 text-green-800"
    }
  }

  const getStatusIcon = (status: Vulnerability["status"]) => {
    switch (status) {
      case "fixed":
        return <CheckCircle className="h-4 w-4 text-green-600" />
      case "false-positive":
        return <X className="h-4 w-4 text-gray-600" />
      case "accepted-risk":
        return <Clock className="h-4 w-4 text-blue-600" />
      default:
        return <AlertTriangle className="h-4 w-4 text-red-600" />
    }
  }

  const getStatusColor = (status: Vulnerability["status"]) => {
    switch (status) {
      case "fixed":
        return "bg-green-100 text-green-800"
      case "false-positive":
        return "bg-gray-100 text-gray-800"
      case "accepted-risk":
        return "bg-blue-100 text-blue-800"
      default:
        return "bg-red-100 text-red-800"
    }
  }

  const handleSubmitReport = async () => {
    setIsSubmitting(true)

    const report = {
      ticketId,
      projectName,
      version,
      vulnerabilities,
      summary: {
        total: vulnerabilities.length,
        critical: vulnerabilities.filter((v) => v.severity === "critical").length,
        high: vulnerabilities.filter((v) => v.severity === "high").length,
        medium: vulnerabilities.filter((v) => v.severity === "medium").length,
        low: vulnerabilities.filter((v) => v.severity === "low").length,
      },
      overallRisk,
      recommendation,
      reportNotes,
      generatedAt: new Date().toISOString(),
      generatedBy: "Security Team",
    }

    // Simulate report submission
    await new Promise((resolve) => setTimeout(resolve, 2000))

    onReportSubmit?.(report)
    setIsSubmitting(false)
  }

  const criticalCount = vulnerabilities.filter((v) => v.severity === "critical").length
  const highCount = vulnerabilities.filter((v) => v.severity === "high").length
  const mediumCount = vulnerabilities.filter((v) => v.severity === "medium").length
  const lowCount = vulnerabilities.filter((v) => v.severity === "low").length

  return (
    <div className="space-y-6">
      {/* Report Header */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle className="flex items-center gap-2">
                <Shield className="h-5 w-5" />
                Security Assessment Report
              </CardTitle>
              <CardDescription>
                Ticket: {ticketId} | Project: {projectName} {version}
              </CardDescription>
            </div>
            <div className="flex gap-2">
              <Button variant="outline">
                <FileText className="h-4 w-4 mr-2" />
                Export PDF
              </Button>
              <Button onClick={handleSubmitReport} disabled={isSubmitting}>
                <Send className="h-4 w-4 mr-2" />
                {isSubmitting ? "Submitting..." : "Submit Report"}
              </Button>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div className="text-center">
              <div className="text-2xl font-bold text-red-600">{criticalCount}</div>
              <div className="text-sm text-muted-foreground">Critical</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-orange-600">{highCount}</div>
              <div className="text-sm text-muted-foreground">High</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-yellow-600">{mediumCount}</div>
              <div className="text-sm text-muted-foreground">Medium</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-green-600">{lowCount}</div>
              <div className="text-sm text-muted-foreground">Low</div>
            </div>
          </div>
        </CardContent>
      </Card>

      <Tabs defaultValue="vulnerabilities" className="space-y-4">
        <TabsList>
          <TabsTrigger value="vulnerabilities">Vulnerabilities</TabsTrigger>
          <TabsTrigger value="summary">Summary & Recommendations</TabsTrigger>
        </TabsList>

        <TabsContent value="vulnerabilities">
          <Card>
            <CardHeader>
              <CardTitle>Vulnerability Details</CardTitle>
              <CardDescription>Detailed findings from the security assessment</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="rounded-md border">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Vulnerability</TableHead>
                      <TableHead>Severity</TableHead>
                      <TableHead>Category</TableHead>
                      <TableHead>Location</TableHead>
                      <TableHead>CVSS</TableHead>
                      <TableHead>Status</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {vulnerabilities.map((vuln) => (
                      <TableRow key={vuln.id}>
                        <TableCell>
                          <div>
                            <p className="font-medium">{vuln.title}</p>
                            <p className="text-sm text-muted-foreground">{vuln.cwe}</p>
                          </div>
                        </TableCell>
                        <TableCell>
                          <Badge className={getSeverityColor(vuln.severity)}>{vuln.severity}</Badge>
                        </TableCell>
                        <TableCell>{vuln.category}</TableCell>
                        <TableCell className="font-mono text-sm">{vuln.location}</TableCell>
                        <TableCell>
                          <span className="font-medium">{vuln.cvss}</span>
                        </TableCell>
                        <TableCell>
                          <Badge className={`${getStatusColor(vuln.status)} flex items-center gap-1 w-fit`}>
                            {getStatusIcon(vuln.status)}
                            {vuln.status.replace("-", " ")}
                          </Badge>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="summary">
          <div className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle>Overall Risk Assessment</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <label className="text-sm font-medium">Risk Level</label>
                  <Select value={overallRisk} onValueChange={setOverallRisk}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select overall risk level" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="critical">Critical - Immediate action required</SelectItem>
                      <SelectItem value="high">High - Action required before deployment</SelectItem>
                      <SelectItem value="medium">Medium - Should be addressed</SelectItem>
                      <SelectItem value="low">Low - Can be addressed in future releases</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <label className="text-sm font-medium">Recommendation</label>
                  <Select value={recommendation} onValueChange={setRecommendation}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select recommendation" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="reject">Reject - Critical vulnerabilities must be fixed</SelectItem>
                      <SelectItem value="conditional">Conditional Approval - Fix high/critical issues</SelectItem>
                      <SelectItem value="approve">Approve - Minor issues can be addressed later</SelectItem>
                      <SelectItem value="approve-clean">Approve - No security issues found</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <label className="text-sm font-medium">Additional Notes</label>
                  <Textarea
                    value={reportNotes}
                    onChange={(e) => setReportNotes(e.target.value)}
                    placeholder="Add any additional notes, context, or recommendations..."
                    rows={4}
                  />
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  )
}
